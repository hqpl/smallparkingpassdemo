package com.hackathon.smallparkingpassdemo.passdomain;

import java.time.LocalDateTime;
import java.util.List;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.hackathon.smallparkingpassdemo.cardomain.Car;
import com.hackathon.smallparkingpassdemo.cardomain.CarService;

@Service
public class ParkingPassService {

    @Value("${parking-pass.notification.days-ahead}")
    private int daysAhead;

    @Value("${parking-pass.creation.days-valid}")
    private int daysValid;

    private final ParkingPassRepository parkingPassRepository;
    private final CarService carService;


    ParkingPassService(ParkingPassRepository parkingPassRepository, CarService carService) {
        this.parkingPassRepository = parkingPassRepository;
        this.carService = carService;
    }

    public ParkingPass generateParkingPass(String carId, String userEmail) {
        // Check car ownership
        Car car = carService.getCarById(carId);
        if (car == null) {
            return null;
        }
        if (!car.getOwnerEmail().equals(userEmail)) {
            return null;
        }
        // Count all not expired parking cards for given user's car
        int count = parkingPassRepository.countCustomQuery(carId, LocalDateTime.now());
        // If parking card exists and expiration date is bigger than 90 days, reject generation
        if (count > 0) {
            return null;
        }
        // Create new Parking Card with expiration date + daysValid
        ParkingPass newParkingPass = new ParkingPass();
        newParkingPass.setCarId(carId);
        newParkingPass.setExpirationDate(LocalDateTime.now().plusDays(daysValid));
        parkingPassRepository.save(newParkingPass);
        // Update car's log
        car.addLogEntry("Parking pass generated by " + userEmail);
        carService.saveCar(car);
        return newParkingPass;
    }

    public List<ParkingPass> getParkingPasses(String ownerEmail) {
        // Get Car details filtered by email and pull passes for those cars
        List<ParkingPass> parkingPasses = parkingPassRepository.findAll();
        return parkingPasses;
    }

    public List<ParkingPass> findByExpirationDate() {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime notificationTime = now.plusDays(daysAhead);
        List<ParkingPass> parkingPasses = parkingPassRepository.findByExpirationDateBefore(notificationTime);
        return parkingPasses;
    }
}
